{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import { observeElementInViewport, Options } from 'observe-element-in-viewport'\nimport { MutableRefObject, useCallback, useEffect, useRef, useState } from 'react'\n\nexport type CallbackRef = (node: HTMLElement | null) => any\nexport type HookOptions = Partial<\n  Pick<Options, Exclude<keyof Options, 'viewport'>> & {\n    viewport: CallbackRef | MutableRefObject<HTMLElement | null>\n    target: CallbackRef | MutableRefObject<HTMLElement | null>\n  }\n>\n\nexport default function useIsInViewport(\n  options: HookOptions = {}\n): [boolean | null, CallbackRef, CallbackRef] {\n  const [isInViewport, setIsInViewport] = useState<boolean | null>(null)\n  const { target, viewport, ...restOpts } = options\n  const parentRef: MutableRefObject<HTMLElement | null> = useRef(null)\n  const childRef: MutableRefObject<HTMLElement | null> = useRef(null)\n\n  const parentCbRef: CallbackRef = useCallback(\n    node => {\n      parentRef.current = node\n      if (viewport) {\n        if (isCallbackRef(viewport)) {\n          viewport(node)\n        } else if (isRefObject(viewport)) {\n          viewport.current = node\n        }\n      }\n    },\n    [parentRef, viewport]\n  )\n\n  const childCbRef: CallbackRef = useCallback(\n    node => {\n      childRef.current = node\n      if (target) {\n        if (isCallbackRef(target)) {\n          target(node)\n        } else if (isRefObject(target)) {\n          target.current = node\n        }\n      }\n    },\n    [childRef, target]\n  )\n\n  useEffect(() => {\n    if (!childRef.current) {\n      return\n    }\n    return observeElementInViewport(\n      childRef.current,\n      () => setIsInViewport(true),\n      () => setIsInViewport(false),\n      {\n        ...restOpts,\n        viewport: parentRef.current\n      }\n    )\n  }, [childRef.current, restOpts, parentRef])\n\n  return [isInViewport, childCbRef, parentCbRef]\n}\n\nfunction isRefObject(x: any): boolean {\n  return typeof x === 'object' && 'current' in x\n}\n\nfunction isCallbackRef(f: any): f is CallbackRef {\n  return typeof f === 'function' && typeof f.call === 'function'\n}\n"],"names":["isRefObject","x","isCallbackRef","f","call","options","useState","parentRef","useRef","childRef","parentCbRef","useCallback","node","current","viewport","childCbRef","target","useEffect","observeElementInViewport","setIsInViewport","Object","restOpts","isInViewport"],"mappings":"kTAiEA,SAASA,EAAYC,SACC,iBAANA,GAAkB,YAAaA,EAG/C,SAASC,EAAcC,SACD,mBAANA,GAAsC,mBAAXA,EAAEC,qBA1D3CC,kBAAuB,UAEiBC,WAAyB,iMAE3DC,EAAkDC,SAAO,MACzDC,EAAiDD,SAAO,MAExDE,EAA2BC,uBAC/BC,GACEL,EAAUM,QAAUD,EAChBE,IACEZ,EAAcY,GAChBA,EAASF,GACAZ,EAAYc,KACrBA,EAASD,QAAUD,KAIzB,CAACL,EAAWO,IAGRC,EAA0BJ,uBAC9BC,GACEH,EAASI,QAAUD,EACfI,IACEd,EAAcc,GAChBA,EAAOJ,GACEZ,EAAYgB,KACrBA,EAAOH,QAAUD,KAIvB,CAACH,EAAUO,WAGbC,0BACOR,EAASI,eAGPK,2BACLT,EAASI,0BACHM,GAAgB,sBAChBA,GAAgB,IACtBC,iBACKC,GACHP,SAAUP,EAAUM,YAGvB,CAACJ,EAASI,QAASQ,EAAUd,IAEzB,CAACe,EAAcP,EAAYL"}