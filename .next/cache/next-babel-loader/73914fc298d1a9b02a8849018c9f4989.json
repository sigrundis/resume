{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/sigrundish/personal-apps/resume/components/ExpandWithAnimation/ExpandWithAnimation.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect } from 'react';\nimport styles from './ExpandWithAnimation.module.scss';\nvar container = styles.container;\n\nvar ExpandWithAnimation = function ExpandWithAnimation(_ref) {\n  var children = _ref.children,\n      isCollapsed = _ref.isCollapsed;\n  var content = useRef(null);\n  useEffect(function () {\n    if (isCollapsed) {\n      collapseSection();\n    }\n  }, []);\n  /**\n   * If the content changes we want to make sure the height is correct.\n   */\n\n  useEffect(function () {\n    if (isCollapsed) {\n      collapseSection();\n    } else {\n      expandSection();\n    }\n  });\n  /**\n   * Called when componend is collapsed.\n   * Updates the height to 0.\n   */\n\n  var collapseSection = function collapseSection() {\n    if (content.current) {\n      content.current.style.height = 0 + 'px';\n    }\n  };\n  /**\n   * Called when componend is expanded.\n   * Updates the height to fit its content.\n   */\n\n\n  var expandSection = function expandSection() {\n    if (content.current) {\n      var sectionHeight = content.current.scrollHeight;\n      content.current.style.height = sectionHeight + 'px';\n    }\n  };\n\n  return __jsx(\"div\", {\n    ref: content,\n    className: container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport default ExpandWithAnimation;","map":{"version":3,"sources":["/Users/sigrundish/personal-apps/resume/components/ExpandWithAnimation/ExpandWithAnimation.tsx"],"names":["React","useRef","useEffect","styles","container","ExpandWithAnimation","children","isCollapsed","content","collapseSection","expandSection","current","style","height","sectionHeight","scrollHeight"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAuD,OAAvD;AAEA,OAAOC,MAAP,MAAmB,mCAAnB;IAEQC,S,GAAcD,M,CAAdC,S;;AAMR,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAGK;AAAA,MAF/BC,QAE+B,QAF/BA,QAE+B;AAAA,MAD/BC,WAC+B,QAD/BA,WAC+B;AAC/B,MAAMC,OAAO,GAAGP,MAAM,CAAiB,IAAjB,CAAtB;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIK,WAAJ,EAAiB;AACfE,MAAAA,eAAe;AAChB;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA;;;;AAGAP,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIK,WAAJ,EAAiB;AACfE,MAAAA,eAAe;AAChB,KAFD,MAEO;AACLC,MAAAA,aAAa;AACd;AACF,GANQ,CAAT;AAQA;;;;;AAIA,MAAMD,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,QAAID,OAAO,CAACG,OAAZ,EAAqB;AACnBH,MAAAA,OAAO,CAACG,OAAR,CAAgBC,KAAhB,CAAsBC,MAAtB,GAA+B,IAAI,IAAnC;AACD;AACF,GAJD;AAMA;;;;;;AAIA,MAAMH,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B,QAAIF,OAAO,CAACG,OAAZ,EAAqB;AACnB,UAAMG,aAAa,GAAGN,OAAO,CAACG,OAAR,CAAgBI,YAAtC;AACAP,MAAAA,OAAO,CAACG,OAAR,CAAgBC,KAAhB,CAAsBC,MAAtB,GAA+BC,aAAa,GAAG,IAA/C;AACD;AACF,GALD;;AAOA,SACE;AAAK,IAAA,GAAG,EAAEN,OAAV;AAAmB,IAAA,SAAS,EAAEJ,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,QADH,CADF;AAKD,CAjDD;;AAmDA,eAAeD,mBAAf","sourcesContent":["import React, { useRef, useEffect, ReactElement } from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './ExpandWithAnimation.module.scss';\n\nconst { container } = styles;\ninterface IExpandWithAnimationProps {\n  children: ReactElement;\n  isCollapsed?: boolean;\n}\n\nconst ExpandWithAnimation = ({\n  children,\n  isCollapsed,\n}: IExpandWithAnimationProps) => {\n  const content = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (isCollapsed) {\n      collapseSection();\n    }\n  }, []);\n\n  /**\n   * If the content changes we want to make sure the height is correct.\n   */\n  useEffect(() => {\n    if (isCollapsed) {\n      collapseSection();\n    } else {\n      expandSection();\n    }\n  });\n\n  /**\n   * Called when componend is collapsed.\n   * Updates the height to 0.\n   */\n  const collapseSection = () => {\n    if (content.current) {\n      content.current.style.height = 0 + 'px';\n    }\n  };\n\n  /**\n   * Called when componend is expanded.\n   * Updates the height to fit its content.\n   */\n  const expandSection = () => {\n    if (content.current) {\n      const sectionHeight = content.current.scrollHeight;\n      content.current.style.height = sectionHeight + 'px';\n    }\n  };\n\n  return (\n    <div ref={content} className={container}>\n      {children}\n    </div>\n  );\n};\n\nexport default ExpandWithAnimation;\n"]},"metadata":{},"sourceType":"module"}