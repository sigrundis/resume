{"ast":null,"code":"var _jsxFileName = \"/Users/sigrundish/personal-apps/resume/components/TimelineItem/TimelineItem.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport useIsInViewport from 'use-is-in-viewport';\nimport styles from './TimelineItem.module.scss';\nconst {\n  container,\n  rightSide,\n  content,\n  year: yearStyle,\n  dividor,\n  animateUp,\n  animateFromLeft,\n  animateFromRight\n} = styles;\n\nconst TimelineItem = ({\n  year,\n  children\n}) => {\n  const [isInViewport, targetRef] = useIsInViewport();\n  const {\n    0: animate,\n    1: setAnimate\n  } = useState(false);\n  useEffect(() => {\n    if (isInViewport) {\n      setAnimate(true);\n    }\n  }, [isInViewport]);\n  console.log('animate', animate);\n  return __jsx(\"div\", {\n    className: container,\n    ref: targetRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classNames(yearStyle, {\n      [animateFromLeft]: animate\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, year), __jsx(\"div\", {\n    className: classNames(dividor, {\n      [animateUp]: animate\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: classNames(rightSide, {\n      [animateFromRight]: animate\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, children)));\n};\n\nexport default TimelineItem;","map":{"version":3,"sources":["/Users/sigrundish/personal-apps/resume/components/TimelineItem/TimelineItem.tsx"],"names":["React","useEffect","useState","classNames","useIsInViewport","styles","container","rightSide","content","year","yearStyle","dividor","animateUp","animateFromLeft","animateFromRight","TimelineItem","children","isInViewport","targetRef","animate","setAnimate","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AAEA,MAAM;AACJC,EAAAA,SADI;AAEJC,EAAAA,SAFI;AAGJC,EAAAA,OAHI;AAIJC,EAAAA,IAAI,EAAEC,SAJF;AAKJC,EAAAA,OALI;AAMJC,EAAAA,SANI;AAOJC,EAAAA,eAPI;AAQJC,EAAAA;AARI,IASFT,MATJ;;AAeA,MAAMU,YAAY,GAAG,CAAC;AAAEN,EAAAA,IAAF;AAAQO,EAAAA;AAAR,CAAD,KAA4C;AAC/D,QAAM,CAACC,YAAD,EAAeC,SAAf,IAA4Bd,eAAe,EAAjD;AACA,QAAM;AAAA,OAACe,OAAD;AAAA,OAAUC;AAAV,MAAwBlB,QAAQ,CAAU,KAAV,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,YAAJ,EAAkB;AAChBG,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,GAJQ,EAIN,CAACH,YAAD,CAJM,CAAT;AAMAI,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB;AAEA,SACE;AAAK,IAAA,SAAS,EAAEb,SAAhB;AAA2B,IAAA,GAAG,EAAEY,SAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEf,UAAU,CAACO,SAAD,EAAY;AAAE,OAACG,eAAD,GAAmBM;AAArB,KAAZ,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,IADH,CADF,EAIE;AAAK,IAAA,SAAS,EAAEN,UAAU,CAACQ,OAAD,EAAU;AAAE,OAACC,SAAD,GAAaO;AAAf,KAAV,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AAAK,IAAA,SAAS,EAAEhB,UAAU,CAACI,SAAD,EAAY;AAAE,OAACO,gBAAD,GAAoBK;AAAtB,KAAZ,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEX,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BQ,QAA1B,CADF,CALF,CADF;AAWD,CAvBD;;AAyBA,eAAeD,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport useIsInViewport from 'use-is-in-viewport';\nimport styles from './TimelineItem.module.scss';\n\nconst {\n  container,\n  rightSide,\n  content,\n  year: yearStyle,\n  dividor,\n  animateUp,\n  animateFromLeft,\n  animateFromRight,\n} = styles;\ninterface ITimelineItemProps {\n  children: React.ReactNode;\n  year: string;\n}\n\nconst TimelineItem = ({ year, children }: ITimelineItemProps) => {\n  const [isInViewport, targetRef] = useIsInViewport();\n  const [animate, setAnimate] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (isInViewport) {\n      setAnimate(true);\n    }\n  }, [isInViewport]);\n\n  console.log('animate', animate);\n\n  return (\n    <div className={container} ref={targetRef}>\n      <div className={classNames(yearStyle, { [animateFromLeft]: animate })}>\n        {year}\n      </div>\n      <div className={classNames(dividor, { [animateUp]: animate })} />\n      <div className={classNames(rightSide, { [animateFromRight]: animate })}>\n        <div className={content}>{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default TimelineItem;\n"]},"metadata":{},"sourceType":"module"}