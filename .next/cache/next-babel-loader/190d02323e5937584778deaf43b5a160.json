{"ast":null,"code":"var _jsxFileName = \"/Users/sigrundish/personal-apps/resume/components/ProgressBar/ProgressBar.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport useIsInViewport from 'use-is-in-viewport';\nimport styles from './ProgressBar.module.scss';\nconst {\n  container,\n  label,\n  progressContainer,\n  progress,\n  advancedProgress,\n  intermediateProgress,\n  fundamentalProgress\n} = styles;\n\nconst ProgressBar = ({\n  title,\n  width: finalWidth,\n  animate,\n  animateDelay,\n  advanced,\n  intermediate,\n  fundamental\n}) => {\n  const [isInViewport, targetRef] = useIsInViewport();\n  const {\n    0: width,\n    1: setWidth\n  } = useState(0);\n  useEffect(() => {\n    if (animate) {\n      setWidth(finalWidth);\n    } else {\n      setWidth(0);\n    }\n  }, [animate]);\n  return __jsx(\"div\", {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, title), __jsx(\"div\", {\n    ref: targetRef,\n    className: progressContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: classNames(progress, {\n      [advancedProgress]: advanced,\n      [intermediateProgress]: intermediate,\n      [fundamentalProgress]: fundamental\n    }),\n    style: {\n      width: `${isInViewport ? width : 0}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default ProgressBar;","map":{"version":3,"sources":["/Users/sigrundish/personal-apps/resume/components/ProgressBar/ProgressBar.tsx"],"names":["React","useState","useEffect","classNames","useIsInViewport","styles","container","label","progressContainer","progress","advancedProgress","intermediateProgress","fundamentalProgress","ProgressBar","title","width","finalWidth","animate","animateDelay","advanced","intermediate","fundamental","isInViewport","targetRef","setWidth"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AAEA,MAAM;AACJC,EAAAA,SADI;AAEJC,EAAAA,KAFI;AAGJC,EAAAA,iBAHI;AAIJC,EAAAA,QAJI;AAKJC,EAAAA,gBALI;AAMJC,EAAAA,oBANI;AAOJC,EAAAA;AAPI,IAQFP,MARJ;;AAoBA,MAAMQ,WAAW,GAAG,CAAC;AACnBC,EAAAA,KADmB;AAEnBC,EAAAA,KAAK,EAAEC,UAFY;AAGnBC,EAAAA,OAHmB;AAInBC,EAAAA,YAJmB;AAKnBC,EAAAA,QALmB;AAMnBC,EAAAA,YANmB;AAOnBC,EAAAA;AAPmB,CAAD,KAQA;AAClB,QAAM,CAACC,YAAD,EAAeC,SAAf,IAA4BnB,eAAe,EAAjD;AACA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQS;AAAR,MAAoBvB,QAAQ,CAAC,CAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,OAAJ,EAAa;AACXO,MAAAA,QAAQ,CAACR,UAAD,CAAR;AACD,KAFD,MAEO;AACLQ,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACD;AACF,GANQ,EAMN,CAACP,OAAD,CANM,CAAT;AAQA,SACE;AAAK,IAAA,SAAS,EAAEX,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBO,KAAxB,CADF,EAEE;AAAK,IAAA,GAAG,EAAES,SAAV;AAAqB,IAAA,SAAS,EAAEf,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAEL,UAAU,CAACM,QAAD,EAAW;AAC9B,OAACC,gBAAD,GAAoBS,QADU;AAE9B,OAACR,oBAAD,GAAwBS,YAFM;AAG9B,OAACR,mBAAD,GAAuBS;AAHO,KAAX,CADvB;AAME,IAAA,KAAK,EAAE;AAAEN,MAAAA,KAAK,EAAG,GAAEO,YAAY,GAAGP,KAAH,GAAW,CAAE;AAArC,KANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAeD,CAnCD;;AAqCA,eAAeF,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport useIsInViewport from 'use-is-in-viewport';\nimport styles from './ProgressBar.module.scss';\n\nconst {\n  container,\n  label,\n  progressContainer,\n  progress,\n  advancedProgress,\n  intermediateProgress,\n  fundamentalProgress,\n} = styles;\n\ninterface IProgressBar {\n  title: string;\n  width: number;\n  animate?: boolean;\n  animateDelay?: boolean;\n  advanced?: boolean;\n  intermediate?: boolean;\n  fundamental?: boolean;\n}\n\nconst ProgressBar = ({\n  title,\n  width: finalWidth,\n  animate,\n  animateDelay,\n  advanced,\n  intermediate,\n  fundamental,\n}: IProgressBar) => {\n  const [isInViewport, targetRef] = useIsInViewport();\n  const [width, setWidth] = useState(0);\n\n  useEffect(() => {\n    if (animate) {\n      setWidth(finalWidth);\n    } else {\n      setWidth(0);\n    }\n  }, [animate]);\n\n  return (\n    <div className={container}>\n      <div className={label}>{title}</div>\n      <div ref={targetRef} className={progressContainer}>\n        <div\n          className={classNames(progress, {\n            [advancedProgress]: advanced,\n            [intermediateProgress]: intermediate,\n            [fundamentalProgress]: fundamental,\n          })}\n          style={{ width: `${isInViewport ? width : 0}%` }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}