{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sigrundish/personal-apps/resume/components/ProgressBar/ProgressBar.tsx\";\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport useIsInViewport from 'use-is-in-viewport';\nimport styles from './ProgressBar.module.scss';\nvar container = styles.container,\n    heading = styles.heading,\n    progressContainer = styles.progressContainer,\n    progress = styles.progress;\n\nvar ProgressBar = function ProgressBar(_ref) {\n  var title = _ref.title,\n      finalWidth = _ref.width;\n\n  var _useIsInViewport = useIsInViewport(),\n      _useIsInViewport2 = _slicedToArray(_useIsInViewport, 2),\n      isInViewport = _useIsInViewport2[0],\n      targetRef = _useIsInViewport2[1];\n\n  var _useState = useState(0),\n      width = _useState[0],\n      setWidth = _useState[1];\n\n  console.log('isInViewport', isInViewport);\n  useEffect(function () {\n    if (isInViewport) {\n      setWidth(finalWidth);\n    } else {\n      setWidth(0);\n    }\n  }, [isInViewport]); // Only re-run the effect if count changes\n\n  return __jsx(\"div\", {\n    className: container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: heading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, title), __jsx(\"div\", {\n    ref: targetRef,\n    className: progressContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: progress,\n    style: {\n      width: \"\".concat(isInViewport ? width : 0, \"%\")\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default ProgressBar;","map":{"version":3,"sources":["/Users/sigrundish/personal-apps/resume/components/ProgressBar/ProgressBar.tsx"],"names":["React","useState","useEffect","useIsInViewport","styles","container","heading","progressContainer","progress","ProgressBar","title","finalWidth","width","isInViewport","targetRef","setWidth","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;IACQC,S,GAAoDD,M,CAApDC,S;IAAWC,O,GAAyCF,M,CAAzCE,O;IAASC,iB,GAAgCH,M,CAAhCG,iB;IAAmBC,Q,GAAaJ,M,CAAbI,Q;;AAO/C,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAgD;AAAA,MAA7CC,KAA6C,QAA7CA,KAA6C;AAAA,MAA/BC,UAA+B,QAAtCC,KAAsC;;AAAA,yBAChCT,eAAe,EADiB;AAAA;AAAA,MAC3DU,YAD2D;AAAA,MAC7CC,SAD6C;;AAAA,kBAExCb,QAAQ,CAAC,CAAD,CAFgC;AAAA,MAE3DW,KAF2D;AAAA,MAEpDG,QAFoD;;AAIlEC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,YAA5B;AACAX,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIW,YAAJ,EAAkB;AAChBE,MAAAA,QAAQ,CAACJ,UAAD,CAAR;AACD,KAFD,MAEO;AACLI,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACD;AACF,GANQ,EAMN,CAACF,YAAD,CANM,CAAT,CALkE,CAW9C;;AAEpB,SACE;AAAK,IAAA,SAAS,EAAER,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BI,KAA1B,CADF,EAEE;AAAK,IAAA,GAAG,EAAEI,SAAV;AAAqB,IAAA,SAAS,EAAEP,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAEC,QADb;AAEE,IAAA,KAAK,EAAE;AAAEI,MAAAA,KAAK,YAAKC,YAAY,GAAGD,KAAH,GAAW,CAA5B;AAAP,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAWD,CAxBD;;AA0BA,eAAeH,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useIsInViewport from 'use-is-in-viewport';\nimport Separator from '../Separator';\nimport styles from './ProgressBar.module.scss';\nconst { container, heading, progressContainer, progress } = styles;\n\ninterface IProgressBar {\n  title: string;\n  width: number;\n}\n\nconst ProgressBar = ({ title, width: finalWidth }: IProgressBar) => {\n  const [isInViewport, targetRef] = useIsInViewport();\n  const [width, setWidth] = useState(0);\n\n  console.log('isInViewport', isInViewport);\n  useEffect(() => {\n    if (isInViewport) {\n      setWidth(finalWidth);\n    } else {\n      setWidth(0);\n    }\n  }, [isInViewport]); // Only re-run the effect if count changes\n\n  return (\n    <div className={container}>\n      <div className={heading}>{title}</div>\n      <div ref={targetRef} className={progressContainer}>\n        <div\n          className={progress}\n          style={{ width: `${isInViewport ? width : 0}%` }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}