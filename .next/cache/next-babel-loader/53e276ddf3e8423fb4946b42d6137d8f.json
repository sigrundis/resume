{"ast":null,"code":"var _jsxFileName = \"/Users/sigrundish/personal-apps/resume/components/ProgressBar/ProgressBar.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport useIsInViewport from 'use-is-in-viewport';\nimport styles from './ProgressBar.module.scss';\nconst {\n  container,\n  heading,\n  progressContainer,\n  progress\n} = styles;\n\nconst ProgressBar = ({\n  title,\n  width: finalWidth\n}) => {\n  const [isInViewport, targetRef] = useIsInViewport();\n  const {\n    0: width,\n    1: setWidth\n  } = useState(0);\n  console.log('isInViewport', isInViewport);\n  return __jsx(\"div\", {\n    className: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: heading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, title), __jsx(\"div\", {\n    ref: targetRef,\n    className: progressContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: progress,\n    style: {\n      width: `${isInViewport ? width : 0}%`\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default ProgressBar;","map":{"version":3,"sources":["/Users/sigrundish/personal-apps/resume/components/ProgressBar/ProgressBar.tsx"],"names":["React","useState","useIsInViewport","styles","container","heading","progressContainer","progress","ProgressBar","title","width","finalWidth","isInViewport","targetRef","setWidth","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAA2C,OAA3C;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,MAAM;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA,iBAAtB;AAAyCC,EAAAA;AAAzC,IAAsDJ,MAA5D;;AAOA,MAAMK,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAK,EAAEC;AAAhB,CAAD,KAAgD;AAClE,QAAM,CAACC,YAAD,EAAeC,SAAf,IAA4BX,eAAe,EAAjD;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQI;AAAR,MAAoBb,QAAQ,CAAC,CAAD,CAAlC;AAEAc,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BJ,YAA5B;AAEA,SACE;AAAK,IAAA,SAAS,EAAER,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAEC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA0BI,KAA1B,CADF,EAEE;AAAK,IAAA,GAAG,EAAEI,SAAV;AAAqB,IAAA,SAAS,EAAEP,iBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAEC,QADb;AAEE,IAAA,KAAK,EAAE;AAAEG,MAAAA,KAAK,EAAG,GAAEE,YAAY,GAAGF,KAAH,GAAW,CAAE;AAArC,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAWD,CAjBD;;AAmBA,eAAeF,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport useIsInViewport from 'use-is-in-viewport';\nimport Separator from '../Separator';\nimport styles from './ProgressBar.module.scss';\nconst { container, heading, progressContainer, progress } = styles;\n\ninterface IProgressBar {\n  title: string;\n  width: number;\n}\n\nconst ProgressBar = ({ title, width: finalWidth }: IProgressBar) => {\n  const [isInViewport, targetRef] = useIsInViewport();\n  const [width, setWidth] = useState(0);\n\n  console.log('isInViewport', isInViewport);\n\n  return (\n    <div className={container}>\n      <div className={heading}>{title}</div>\n      <div ref={targetRef} className={progressContainer}>\n        <div\n          className={progress}\n          style={{ width: `${isInViewport ? width : 0}%` }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n"]},"metadata":{},"sourceType":"module"}